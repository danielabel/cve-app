import nock from 'nock';
import {jest} from '@jest/globals';
import * as CVEs from './CVE-data-getters';

// these tests are noisy
beforeEach(() => {
  jest.spyOn(console, 'error').mockImplementation(() => {});
});

afterEach(() => {
  jest.resetAllMocks();
});


describe('Show search', () => {

  function searchNock() {
    return nock('http://localhost:8080')
      .defaultReplyHeaders({
        'access-control-allow-origin': '*',
        'access-control-allow-credentials': 'true'
      })
      .get('/cve/search');
  }

  it('given a search term, gets search data json',  async () => {
    searchNock()
      .query({for: 'doctor'})
      .reply(200, {totalResults: 13});

    expect(await CVEs.getCVEs('doctor')).toEqual({totalResults: 13});
  });

  it('adds a shortened description if description contains 35 or more characters  ',  async () => {
    searchNock()
      .query({for: 'doctor'})
      .reply(200, {totalResults: 13, "topResults": [{description: '12345678901234567890123456789012345678901234567890'}]});

    expect(await CVEs.getCVEs('doctor'))
      .toMatchObject({topResults: [{
        description: '12345678901234567890123456789012345678901234567890',
        shortDesc: '1234567890123456789012345678901234...'
      }]});
  });

  it('duplicates description into a shortened description if description contains less than 35 characters  ',  async () => {
    searchNock()
      .query({for: 'doctor'})
      .reply(200, {totalResults: 13, "topResults": [{description: '1234567890123456789012345678901234'}]});

    expect(await CVEs.getCVEs('doctor'))
      .toMatchObject({topResults: [{
          description: '1234567890123456789012345678901234',
          shortDesc: '1234567890123456789012345678901234'
        }]});
  });


  describe('Error cases', () => {
    it('deals with http error cases',  async () => {
      searchNock()
        .query({q: 'doctor'})
        .reply(400);

      await expect(CVEs.getCVEs('doctor'))
        .rejects
        .toThrow('failed to get data');
    });

    it('deals with network error cases',  async () => {
      searchNock()
        .query({q: 'doctor'})
        .replyWithError('something awful happened')

      await expect(CVEs.getCVEs('doctor'))
        .rejects
        .toThrow('failed to get data');
    });
  });
});
