package com.twicezero.cveappservice.controllers;

import builders.NvdTestData;
import io.specto.hoverfly.junit.core.Hoverfly;
import io.specto.hoverfly.junit5.HoverflyExtension;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static io.specto.hoverfly.junit.core.SimulationSource.dsl;
import static io.specto.hoverfly.junit.dsl.HoverflyDsl.service;
import static io.specto.hoverfly.junit.dsl.HttpBodyConverter.jsonWithSingleQuotes;
import static io.specto.hoverfly.junit.dsl.ResponseCreators.serverError;
import static io.specto.hoverfly.junit.dsl.ResponseCreators.success;
import static io.specto.hoverfly.junit.dsl.matchers.HoverflyMatchers.any;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(HoverflyExtension.class)
public class CVESearchControllerTests {

    private final static String upstreamBaseUrl = "services.nvd.nist.gov";
    private static final String upstreamApiUri = "/rest/json/cves/1.0";

    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    void beforeEach(Hoverfly hoverfly) {
        hoverfly.reset();
    }

    @AfterEach
    void afterEach(Hoverfly hoverfly) {
        hoverfly.verifyAll();
    }

    @Test
    void aSearchThatResultsinNoResultsIsProcessedCorrectly(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body(jsonWithSingleQuotes("{'totalResults': 0}")))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().isOk())
                .andExpect(content().json("{totalResults: 0}"));
    }

    @Test
    void searchingForATermWillRequestDataFromNVDAndProcessesMinimalData(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body(jsonWithSingleQuotes("{'totalResults': 1024, 'result': {'CVE_Items': []}}")))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().isOk())
                .andExpect(content().json("{totalResults: 1024}"));
    }


    @Test
    void searchingForATermWillReturnSummaryResults(Hoverfly hoverfly) throws Exception {

        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body(new NvdTestData().build(4).toString()))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().isOk())
                .andExpect(content().json("{totalResults: 41}", false))
                .andExpect(jsonPath("$.topResults").isArray())
                .andExpect(jsonPath("$.topResults[0].description").value("description 0"))
                .andExpect(jsonPath("$.topResults[0].publishedDate").value("2020-04-06T13:15Z"))
                .andExpect(jsonPath("$.topResults[0].id").value("CVE-2020-7635"))
                .andExpect(jsonPath("$.topResults[0].severity").value("CRITICAL"))
                .andExpect(jsonPath("$.topResults[3].description").value("description 3"));
    }


    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Error cases and unhappy paths

    @Test
    void receivingNotJsonResultsInA500(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body("{'totalResultsesult': {'CVE_Items': []}}"))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().is5xxServerError());
    }

    @Test
    void receivingEmptyJsonResultsInA500(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body(jsonWithSingleQuotes("{}")))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().is5xxServerError());
    }

    @Test
    void receivingNoDataResultsInA500(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service(upstreamBaseUrl)
                        .get(upstreamApiUri).queryParam("keyword", "wordpress")
                        .willReturn(success().body(jsonWithSingleQuotes("")))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().is5xxServerError());
    }

    @Test
    void searchingWithoutATermWillResultInA400() throws Exception {
        mockMvc.perform(get("/cve/search").queryParam("nope-for", "wordpress"))
                .andExpect(status().isBadRequest());
    }

    @Test
    void handlesUpstreamHTTPError(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(service(upstreamBaseUrl)
                .anyMethod(any())
                .anyQueryParams()
                .anyBody().willReturn(serverError())));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().is5xxServerError());
    }
}
