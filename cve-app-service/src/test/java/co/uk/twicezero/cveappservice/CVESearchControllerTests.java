package co.uk.twicezero.cveappservice;

import io.specto.hoverfly.junit.core.Hoverfly;
import io.specto.hoverfly.junit5.HoverflyExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static io.specto.hoverfly.junit.core.SimulationSource.dsl;
import static io.specto.hoverfly.junit.dsl.HoverflyDsl.service;
import static io.specto.hoverfly.junit.dsl.HttpBodyConverter.jsonWithSingleQuotes;
import static io.specto.hoverfly.junit.dsl.ResponseCreators.success;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;



@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(HoverflyExtension.class)
public class CVESearchControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Test
    void searchingForATermWillRequestDataFromNVD(Hoverfly hoverfly) throws Exception {
        hoverfly.simulate(dsl(
                service("services.nvd.nist.gov")
                        .get("/rest/json/cpes/1.0").queryParam("keyword", "wordpress")
                        .willReturn(success().body(jsonWithSingleQuotes("{'totalResults': 1024 }")))));

        mockMvc.perform(get("/cve/search").queryParam("for", "wordpress"))
                .andExpect(status().isOk())
                .andExpect(content().json("{totalResults: 1024}"));

        hoverfly.verifyAll();
    }

    @Test
    void searchingWithoutATermWillResultInA400(Hoverfly hoverfly) throws Exception {

        mockMvc.perform(get("/cve/search").queryParam("nope-for", "wordpress"))
                .andExpect(status().isBadRequest());

        hoverfly.verifyAll();
    }

}
