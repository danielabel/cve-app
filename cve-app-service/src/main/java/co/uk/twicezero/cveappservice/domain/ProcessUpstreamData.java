package co.uk.twicezero.cveappservice.domain;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.PathNotFoundException;

import java.util.ArrayList;
import java.util.Collections;

public class ProcessUpstreamData {
    private final static String jsonpathCVEDescriptionIndexed = "$['cve']['description']['description_data'][0]['value']";
    private final static String jsonpathCVEPubDateIndexed =     "$['publishedDate']";
    private final static String jsonpathCVEIdIndexed =          "$['cve']['CVE_data_meta']['ID']";
    private final static String jsonpathCVESeverityIndexed =    "$['impact']['baseMetricV3']['cvssV3']['baseSeverity']";

    private final static ObjectMapper objectMapper = new ObjectMapper();

    public static ResultsSummary buildResultsSummary(String responseBody) throws JsonProcessingException {

        ObjectNode responseJson = (ObjectNode)objectMapper.readTree(responseBody);

        int totalResults = responseJson.get("totalResults").asInt(0);
        if (totalResults == 0) {
            return new ResultsSummary(0, Collections.emptyList());
        }

        ArrayNode CVE_Items = (ArrayNode) responseJson.get("result").get("CVE_Items");
        ArrayList<ResultsSummary.Cve> cves = getCves(CVE_Items);

        return new ResultsSummary(totalResults, cves);
    }

    private static String safeRead(DocumentContext context, String jsonpath) {
        try {
            return context.read(jsonpath);
        } catch (PathNotFoundException ex) {
            return null;
        }
    }

    private static ArrayList<ResultsSummary.Cve> getCves(ArrayNode CVE_Items) {
        ArrayList<ResultsSummary.Cve> cves = new ArrayList<>(CVE_Items.size());

        CVE_Items.forEach(cveNode -> {
            DocumentContext jsonContext = JsonPath.parse(cveNode.toString());
            cves.add(new ResultsSummary.Cve(
                    safeRead(jsonContext, jsonpathCVEDescriptionIndexed),
                    safeRead(jsonContext, jsonpathCVEPubDateIndexed),
                    safeRead(jsonContext, jsonpathCVEIdIndexed),
                    safeRead(jsonContext, jsonpathCVESeverityIndexed)));
        });
        return cves;
    }
}
