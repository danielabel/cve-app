package co.uk.twicezero.cveappservice.domain;

import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;

import java.net.SocketOption;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

public class ProcessUpstreamData {

    private final static String jsonpathTotalResults =   "$['totalResults']";
    private final static String jsonpathCVEDescription = "$['result']['CVE_Items'][*]['cve']['description']['description_data'][0]['value']";
    private final static String jsonpathCVEPubDate =     "$['result']['CVE_Items'][*]['publishedDate']";

    public static ResultsSummary buildResultsSummary(String responseBody) {
        DocumentContext jsonContext = JsonPath.parse(responseBody);
        int totalResults = jsonContext.read(jsonpathTotalResults);
        List<String> cveDescriptions = jsonContext.read(jsonpathCVEDescription);
        List<String> cvePubDates = jsonContext.read(jsonpathCVEPubDate);

        // ideally this would be a lovely stream thing - but it likely would be harder to read
        ArrayList<ResultsSummary.Cve> cves = new ArrayList<>(cveDescriptions.size());
        for (int i = 0; i < cveDescriptions.size(); i++) {
            new ResultsSummary.Cve(cveDescriptions.get(i), cvePubDates.get(i));
            cves.add(new ResultsSummary.Cve(cveDescriptions.get(i), cvePubDates.get(i)));
        }

        return new ResultsSummary(totalResults, cves);
    }
}
